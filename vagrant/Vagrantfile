# -*- mode: ruby -*-
# vi: set ft=ruby :


############ GET HOST OS ############
module OS
  def OS.windows?
    (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
  end

  def OS.mac?
    (/darwin/ =~ RUBY_PLATFORM) != nil
  end

  def OS.unix?
    !OS.windows?
  end

  def OS.linux?
    OS.unix? and not OS.mac?
  end
end
####################################################################


############ CUSTOM SCRIPT TO INSTALL REQUIRED PLUGINS ############
if ARGV[0] == "up"
  puts "##################################"
  puts "Checking required plugins"
  required_plugins = %w( vagrant-fsnotify vagrant-share vagrant-triggers vagrant-vbguest )
  required_plugins.each do |plugin|
    if (Vagrant.has_plugin? plugin) == false
      puts "#{plugin} Not Found.... Installing...."

      if OS.windows?
        exec "vagrant plugin install #{plugin}&& vagrant #{ARGV.join(" ")}"
      else
        exec "vagrant plugin install #{plugin};vagrant #{ARGV.join(" ")}"
      end
    else
      puts "#{plugin}.... Installed"
    end
  end
  puts "##################################"
end
####################################################################

############ CHECK GITHUB CONFIGURATION IS COMPLETE ############
# if ARGV[0] == "up"
#   puts "##################################"
#   puts "Checking Custom Configuration"
#   # File.open 'vagrant.conf' do |file|
#   #   puts "SEARCH"
#   #   puts file.find { |line| line =~ /\/GITHUBUSER=.*/ }
#   # end
#   # "SDFSDF".match(/\/data.*/)[0]
#
#
#   #CHECK IF VAGRANT.CONF FILE EXISTS
#   if File.exist? File.expand_path "./vagrant.conf"
#     gitUser= File.foreach('vagrant.conf').grep /GITHUBUSER/
#     gitUser = gitUser[0].split('=', 2)[1].strip
#
#     gitPass= File.foreach('vagrant.conf').grep /GITHUBPASSWORD/
#     gitPass = gitPass[0].split('=', 2)[1].strip
#
#     if gitUser.length == 0
#       puts "GITHUB USERNAME IS BLANK. PLEASE UPDATE IN vagrant.conf, AND RESTART VAGRANT UP"
#       exit
#     end
#
#     if gitPass.length == 0
#       puts "GITHUB PASSWORD IS BLANK. PLEASE UPDATE IN vagrant.conf, AND RESTART VAGRANT UP"
#       exit
#     end
#   else
#     puts "What is your Github Username:"
#     gitUser = gets.chomp
#     puts "What is your Github Password:"
#     gitPass = gets.chomp
#
#     File.open("vagrant.conf", "w") {|f| f.write("GITHUBUSER=#{gitUser}\nGITHUBPASSWORD=#{gitPass}\n") }
#   end
#
#
#   puts "GITHUB USERNAME=#{gitUser}"
#   puts "GITHUB PASSWORD=#{gitPass}"
#   puts "##################################"
# end
####################################################################


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "base"
  # config.vm.box = "nbase"
  # config.vm.box_url = "file:///Users/paikchris/Development/temp/nbase.box"
  config.vm.box = "paikchris/nbase"
  config.vm.box_version = "0.0.1"

  config.vm.provision :shell, path: "nbaseBootstrap.sh"
  config.vm.network :forwarded_port, guest: 8080, host: 8080
  config.vm.network :forwarded_port, guest: 1433, host: 1433
  config.vm.network :forwarded_port, guest: 3306, host: 3306

  config.vm.hostname = "localDevVagrant"
  # config.ssh.password = "password"

  config.vm.synced_folder "./../../", "/universe/", fsnotify: true

  ######### VAGRANT TRIGGER PLUGIN ###################
  # run some script before the guest is destroyed
  # config.trigger.before :destroy do
  #   info "Dumping the database before destroying the VM..."
  #   run_remote  "bash /vagrant/cleanup.sh"
  # end

  # clean up files on the host after the guest is destroyed
  # config.trigger.after :destroy do
  #   run "rm -Rf tmp/*"
  # end

  # start apache on the guest after the guest starts
  # config.trigger.after :up do
  #   run_remote "service apache2 start"
  # end

  # START VAGRANT FSNOTIFY
  config.trigger.after :up do
    if OS.windows?
      run "tasklist | find /i 'fsnotifier64.exe' && taskkill /im fsnotifier64.exe /F || echo process 'fsnotifier64.exe' not running"
      run "start vagrant fsnotify"
    else
      `ps -ef | grep "fsnotify" | awk '{print $2}' | xargs kill`
      `(vagrant fsnotify &>/dev/null) &`
    end
  end

  ######################################################

  #PERFORMANCE TWEAKS
  #NFS PLUGIN FOR WINDOWS NEEDED
  # vagrant plugin install vagrant winnfsd
  # config.vm.network "private_network", type: "dhcp"
  # config.vm.synced_folder "universe/", "/universe/", nfs:true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
    host = RbConfig::CONFIG['host_os']

    # Give VM 1/4 system memory
    if host =~ /darwin/
      # sysctl returns Bytes and we need to convert to MB
      mem = `sysctl -n hw.memsize`.to_i / 1024
    elsif host =~ /linux/
      # meminfo shows KB and we need to convert to MB
      mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i
    elsif host =~ /mswin|mingw|cygwin/
      # Windows code via https://github.com/rdsubhas/vagrant-faster
      mem = `wmic computersystem Get TotalPhysicalMemory`.split[1].to_i / 1024
    end

    # mem = mem / 1024 / 4
    mem = 4048
    vb.customize ["modifyvm", :id, "--memory", mem]


    # vb.customize ["modifyvm", :id, "--ioapic", "on"]
    # vb.cpus = 2
    # vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    # vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  end


  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
